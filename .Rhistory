print(t)
#Loop over shocks space
for(i in 1:length(xgrid)){
b=xgrid[i]
guess=0.1
low=.0001
high= 1
output = optim(par=guess,fn=Payoff,lower=low,upper=high,b=b,V=V,sim=sim,method='L-BFGS-B')
fstar = output$par
Vstar = -output$value
Vnext[i]=Vstar
DFnow = data.frame(time=t,b=b,fstar=fstar,Vstar=Vstar)
DFall = bind_rows(DFall,DFnow)
polnow[i]=fstar
}
#Check if errors reach tolerance for policy function convergence
comp<-abs(polnow-pol_converged)
error_vec<-mean(comp)
if(error_vec<tol & step>10){
error="True"
}else{
error="False"
}
step=step+1
#browser()
V=Vnext
pol_converged=polnow
#Check to make sure we stop eventually
if(step==400){
print('Maximum number of iterations (400) reached.')
break
}
}
Payoff = function(f,b,sim,V)
{
cost=c*(f^cshape)
utility=vector(mode='numeric',length=length(sim))
for (i in seq_along(sim)){
theta=sim[i]
xnext = growth(b,f,theta)
temp<-spline(x=xgrid,y=V,xout=xnext,method="natural")
sp_store<-temp$y
Vfuture=delta*sp_store
# insurance calculation
if(theta<trigger){
utility[i]=1-exp(-a*(profit(f=f,b=b,theta=theta)+gamma-premium))
} else{
utility[i]=1-exp(-a*(profit(f=f,b=b,theta=theta)))
}
}
eu=mean(utility,na.rm=TRUE)
#xnext = max(small,f(h,x))
#browser()
return(-eu)
}
while(error=="False"){
t=step
print(t)
#Loop over shocks space
for(i in 1:length(xgrid)){
b=xgrid[i]
guess=0.1
low=.0001
high= 1
output = optim(par=guess,fn=Payoff,lower=low,upper=high,b=b,V=V,sim=sim,method='L-BFGS-B')
fstar = output$par
Vstar = -output$value
Vnext[i]=Vstar
DFnow = data.frame(time=t,b=b,fstar=fstar,Vstar=Vstar)
DFall = bind_rows(DFall,DFnow)
polnow[i]=fstar
}
#Check if errors reach tolerance for policy function convergence
comp<-abs(polnow-pol_converged)
error_vec<-mean(comp)
if(error_vec<tol & step>10){
error="True"
}else{
error="False"
}
step=step+1
#browser()
V=Vnext
pol_converged=polnow
#Check to make sure we stop eventually
if(step==400){
print('Maximum number of iterations (400) reached.')
break
}
}
Payoff = function(f,b,sim,V)
{
cost=c*(f^cshape)
utility=vector(mode='numeric',length=length(sim))
for (i in seq_along(sim)){
theta=sim[i]
xnext = growth(b,f,theta)
temp<-spline(x=xgrid,y=V,xout=xnext,method="natural")
sp_store<-temp$y
Vfuture=delta*sp_store
# insurance calculation
if(theta<trigger){
utility[i]=1-exp(-a*(pi(f=f,b=b,theta=theta)+gamma-premium))
} else{
utility[i]=1-exp(-a*(pi(f=f,b=b,theta=theta)))
}
}
eu=mean(utility,na.rm=TRUE)
#xnext = max(small,f(h,x))
#browser()
return(-eu)
}
DFall = data.frame()
Vnext = vector(mode='numeric',length=sizex)
V = rep(0,length.out=sizex)
pol_converged=vector(mode='numeric',length=sizex) #Harvest Policy function
polnow=vector(mode='numeric',length=sizex)
step=1
error="False"
tol=0.001
while(error=="False"){
t=step
print(t)
#Loop over shocks space
for(i in 1:length(xgrid)){
b=xgrid[i]
guess=0.1
low=.0001
high= 1
output = optim(par=guess,fn=Payoff,lower=low,upper=high,b=b,V=V,sim=sim,method='L-BFGS-B')
fstar = output$par
Vstar = -output$value
Vnext[i]=Vstar
DFnow = data.frame(time=t,b=b,fstar=fstar,Vstar=Vstar)
DFall = bind_rows(DFall,DFnow)
polnow[i]=fstar
}
#Check if errors reach tolerance for policy function convergence
comp<-abs(polnow-pol_converged)
error_vec<-mean(comp)
if(error_vec<tol & step>10){
error="True"
}else{
error="False"
}
step=step+1
#browser()
V=Vnext
pol_converged=polnow
#Check to make sure we stop eventually
if(step==400){
print('Maximum number of iterations (400) reached.')
break
}
}
ins_pol_conv<-DFall %>%
filter(time==max(DFall$time)) %>%
group_by(b) %>%
summarize(pol_opt=mean(fstar))
ggplot(ins_pol_conv,aes(x=b,y=pol_opt))
View(ins_pol_conv)
ggplot(ins_pol_conv,aes(x=b,y=pol_opt))+
geom_line()
library(tidyverse)
sizex = 50 #size of the state grid
sizez = 4  #size of the shock grid
T=50 #time horizon for backward induction
cshape=1.3 #cost shaping parameter
delta=.96
r=0.8
K=1000
small=K/100
p=5
c=250
a=0.008 #risk aversion
#Environmental parameters
mean_theta=0
sigma_theta=0.5
set.seed(42)
sim<-rnorm(1000,mean=mean_theta,sd=sigma_theta)
sim<-sim[which(sim>=-1)]
#### HCR control ####
hcr="two"
#### Payouts and Premiums parameters ####
insurance=1 #use insurance 1, 0 no insurance
gamma=0
trigger=-.33
premium=gamma*pnorm(trigger,mean_theta,sigma_theta)
#### Set up state grid ####
xgrid = seq(small,K,length.out=sizex)
#### Optimization functions ####
harvest <- function(f, biomass, theta){
harvest = f * biomass * (1+theta)
return(harvest)
}
#Growth function
growth = function(b,f,theta)
{
escapement=b*(1+theta)-harvest(f=f,biomass=b,theta = theta)
if(escapement>K){
bnext=K
}else if(escapement<0){
bnext=small
}  else{
bnext = escapement + r*escapement*(1-escapement/K)
}
return(bnext)
}
pi = function(f,b,theta)
{
profit = (p*harvest(f=f,biomass=b,theta = theta))-(c*(f^cshape))
return(profit)
}
Payoff = function(f,b,sim,V)
{
cost=c*(f^cshape)
utility=vector(mode='numeric',length=length(sim))
for (i in seq_along(sim)){
theta=sim[i]
xnext = growth(b,f,theta)
temp<-spline(x=xgrid,y=V,xout=xnext,method="natural")
sp_store<-temp$y
Vfuture=delta*sp_store
# insurance calculation
if(theta<trigger){
utility[i]=1-exp(-a*(pi(f=f,b=b,theta=theta)+gamma-premium))
} else{
utility[i]=1-exp(-a*(pi(f=f,b=b,theta=theta)))
}
}
eu=mean(utility,na.rm=TRUE)
#xnext = max(small,f(h,x))
#browser()
return(-eu)
}
DFall = data.frame()
Vnext = vector(mode='numeric',length=sizex)
V = rep(0,length.out=sizex)
pol_converged=vector(mode='numeric',length=sizex) #Harvest Policy function
polnow=vector(mode='numeric',length=sizex)
step=1
error="False"
tol=0.001
while(error=="False"){
t=step
print(t)
#Loop over shocks space
for(i in 1:length(xgrid)){
b=xgrid[i]
guess=0.1
low=.0001
high= 1
output = optim(par=guess,fn=Payoff,lower=low,upper=high,b=b,V=V,sim=sim,method='L-BFGS-B')
fstar = output$par
Vstar = -output$value
Vnext[i]=Vstar
DFnow = data.frame(time=t,b=b,fstar=fstar,Vstar=Vstar)
DFall = bind_rows(DFall,DFnow)
polnow[i]=fstar
}
#Check if errors reach tolerance for policy function convergence
comp<-abs(polnow-pol_converged)
error_vec<-mean(comp)
if(error_vec<tol & step>10){
error="True"
}else{
error="False"
}
step=step+1
#browser()
V=Vnext
pol_converged=polnow
#Check to make sure we stop eventually
if(step==400){
print('Maximum number of iterations (400) reached.')
break
}
}
no_pol_conv<-DFall %>%
filter(time==max(DFall$time)) %>%
group_by(b) %>%
summarize(pol_opt=mean(fstar))
ggplot(ins_pol_conv,aes(x=b,y=pol_opt))+
geom_line()+
geom_line(data=no_pol_conv,aes(x=b,y=pol_opt),color='blue')
Payoff = function(f,b,sim,V)
{
cost=c*(f^cshape)
utility=vector(mode='numeric',length=length(sim))
for (i in seq_along(sim)){
theta=sim[i]
xnext = growth(b,f,theta)
temp<-spline(x=xgrid,y=V,xout=xnext,method="natural")
sp_store<-temp$y
Vfuture=delta*sp_store
# insurance calculation
if(theta<trigger){
utility[i]=1-exp(-a*(pi(f=f,b=b,theta=theta)+gamma-premium))
} else{
utility[i]=1-exp(-a*(pi(f=f,b=b,theta=theta)))
}
}
eu=mean(utility+Vfuture,na.rm=TRUE)
#xnext = max(small,f(h,x))
#browser()
return(-eu)
}
DFall = data.frame()
Vnext = vector(mode='numeric',length=sizex)
V = rep(0,length.out=sizex)
pol_converged=vector(mode='numeric',length=sizex) #Harvest Policy function
polnow=vector(mode='numeric',length=sizex)
step=1
error="False"
tol=0.001
while(error=="False"){
t=step
print(t)
#Loop over shocks space
for(i in 1:length(xgrid)){
b=xgrid[i]
guess=0.1
low=.0001
high= 1
output = optim(par=guess,fn=Payoff,lower=low,upper=high,b=b,V=V,sim=sim,method='L-BFGS-B')
fstar = output$par
Vstar = -output$value
Vnext[i]=Vstar
DFnow = data.frame(time=t,b=b,fstar=fstar,Vstar=Vstar)
DFall = bind_rows(DFall,DFnow)
polnow[i]=fstar
}
#Check if errors reach tolerance for policy function convergence
comp<-abs(polnow-pol_converged)
error_vec<-mean(comp)
if(error_vec<tol & step>10){
error="True"
}else{
error="False"
}
step=step+1
#browser()
V=Vnext
pol_converged=polnow
#Check to make sure we stop eventually
if(step==400){
print('Maximum number of iterations (400) reached.')
break
}
}
no_pol_conv<-DFall %>%
filter(time==max(DFall$time)) %>%
group_by(b) %>%
summarize(pol_opt=mean(fstar))
ggplot(ins_pol_conv,aes(x=b,y=pol_opt))+
geom_line()+
geom_line(data=no_pol_conv,aes(x=b,y=pol_opt),color='blue')
DFall = data.frame()
Vnext = vector(mode='numeric',length=sizex)
V = rep(0,length.out=sizex)
pol_converged=vector(mode='numeric',length=sizex) #Harvest Policy function
polnow=vector(mode='numeric',length=sizex)
step=1
error="False"
tol=0.001
while(error=="False"){
t=step
print(t)
#Loop over shocks space
for(i in 1:length(xgrid)){
b=xgrid[i]
guess=0.1
low=.0001
high= 1
output = optim(par=guess,fn=Payoff,lower=low,upper=high,b=b,V=V,sim=sim,method='L-BFGS-B')
fstar = output$par
Vstar = -output$value
Vnext[i]=Vstar
DFnow = data.frame(time=t,b=b,fstar=fstar,Vstar=Vstar)
DFall = bind_rows(DFall,DFnow)
polnow[i]=fstar
}
#Check if errors reach tolerance for policy function convergence
comp<-abs(polnow-pol_converged)
error_vec<-mean(comp)
if(error_vec<tol & step>9){
error="True"
}else{
error="False"
}
step=step+1
#browser()
V=Vnext
pol_converged=polnow
#Check to make sure we stop eventually
if(step==400){
print('Maximum number of iterations (400) reached.')
break
}
}
ins_pol_conv<-DFall %>%
filter(time==max(DFall$time)) %>%
group_by(b) %>%
summarize(pol_opt=mean(fstar))
ggplot(ins_pol_conv,aes(x=b,y=pol_opt))+
geom_line()+
geom_line(data=no_pol_conv,aes(x=b,y=pol_opt),color='blue')
ins_pol_conv
no_pol_conv
insurance=1 #use insurance 1, 0 no insurance
gamma=250
trigger=-.33
premium=gamma*pnorm(trigger,mean_theta,sigma_theta)
#### Set up state grid ####
xgrid = seq(small,K,length.out=sizex)
#### Optimization functions ####
harvest <- function(f, biomass, theta){
harvest = f * biomass * (1+theta)
return(harvest)
}
#Growth function
growth = function(b,f,theta)
{
escapement=b*(1+theta)-harvest(f=f,biomass=b,theta = theta)
if(escapement>K){
bnext=K
}else if(escapement<0){
bnext=small
}  else{
bnext = escapement + r*escapement*(1-escapement/K)
}
return(bnext)
}
pi = function(f,b,theta)
{
profit = (p*harvest(f=f,biomass=b,theta = theta))-(c*(f^cshape))
return(profit)
}
Payoff = function(f,b,sim,V)
{
cost=c*(f^cshape)
utility=vector(mode='numeric',length=length(sim))
for (i in seq_along(sim)){
theta=sim[i]
xnext = growth(b,f,theta)
temp<-spline(x=xgrid,y=V,xout=xnext,method="natural")
sp_store<-temp$y
Vfuture=delta*sp_store
# insurance calculation
if(theta<trigger){
utility[i]=1-exp(-a*(pi(f=f,b=b,theta=theta)+gamma-premium))
} else{
utility[i]=1-exp(-a*(pi(f=f,b=b,theta=theta)))
}
}
eu=mean(utility+Vfuture,na.rm=TRUE)
#xnext = max(small,f(h,x))
#browser()
return(-eu)
}
DFall = data.frame()
Vnext = vector(mode='numeric',length=sizex)
V = rep(0,length.out=sizex)
pol_converged=vector(mode='numeric',length=sizex) #Harvest Policy function
polnow=vector(mode='numeric',length=sizex)
step=1
error="False"
tol=0.001
while(error=="False"){
t=step
print(t)
#Loop over shocks space
for(i in 1:length(xgrid)){
b=xgrid[i]
guess=0.1
low=.0001
high= 1
output = optim(par=guess,fn=Payoff,lower=low,upper=high,b=b,V=V,sim=sim,method='L-BFGS-B')
fstar = output$par
Vstar = -output$value
Vnext[i]=Vstar
DFnow = data.frame(time=t,b=b,fstar=fstar,Vstar=Vstar)
DFall = bind_rows(DFall,DFnow)
polnow[i]=fstar
}
#Check if errors reach tolerance for policy function convergence
comp<-abs(polnow-pol_converged)
error_vec<-mean(comp)
if(error_vec<tol & step>9){
error="True"
}else{
error="False"
}
step=step+1
#browser()
V=Vnext
pol_converged=polnow
#Check to make sure we stop eventually
if(step==400){
print('Maximum number of iterations (400) reached.')
break
}
}
ins_pol_conv<-DFall %>%
filter(time==max(DFall$time)) %>%
group_by(b) %>%
summarize(pol_opt=mean(fstar))
ggplot(ins_pol_conv,aes(x=b,y=pol_opt))+
geom_line()+
geom_line(data=no_pol_conv,aes(x=b,y=pol_opt),color='blue')
save(ins_pol_conv,file=here::here("data","ins_pol_unknown.Rdata"))
save(no_pol_conv,file=here::here("data","no_pol_unknown.Rdata"))
